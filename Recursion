find 5!
5! = 1*2*3*4*5 = 120

1. An iterative Algorithm

def getFactorical(5)
  focorial = 1
    for x = 1 to 5:
      factorial = factorial * x

2. A Recursive Algorithm
def getFactorical(n)
  if n < 2:
    return 1
  else:
    return n*getFactorical(n-1)
'''''''''''''''''''''''' 
3. 求树的最大深度
''''''''''''''''''''''''

    class Solution(object):
    def maxDepth(self, root):
        if root is None:
            return 0 
        if root is not None:       
            r1 = 1 + self.maxDepth(root.left) 
            r2 = 1 + self.maxDepth(root.right) 
        return max(r1, r2)
       
 ''''''''''''''''''''''''''
 4. 树的sum(root to leaf) 等于一个值  
 ''''''''''''''''''''''''''
 
  class Solution:

    def hasPathSum(self, root, sum): # 用减法，不必每次设置初值，每次初值就是sum
        if not root:
            return False

        if not root.left and not root.right and root.val == sum:
            return True
        
        sum = sum - root.val
        
        return self.hasPathSum(root.left, sum)  or self.hasPathSum(root.right, sum)

 
 '''
 5. 递归的另一个例子——二叉树的插入
 '''
 def insert(self, data):
    if self.data is not None:
        if data >= self.data:
            if self.left is not None:
                 self.left.insert(data) # 如果要插入的节点存在数据，则要将这个节点看成根节点，在执行一下insert;这个子节点和父节点做的事情是一样的
            else:
                self.left = Node(data)
        else:
             if self.right is not None:
                 self.right.insert(data)
             else:
                 self.right = None(data)
    else:
        self.data = data
 
'''
6. 递归的一个例子——打印树
'''
 # Print the tree
    def PrintTree(self):
        if self.left is not None:
            self.left.PrintTree() # 如果子树存在的话，那么打印的动作和父树相同，所以这个地方可以用递归
        print(self.data)
        if self.right is not None:
            self.right.PrintTree()
