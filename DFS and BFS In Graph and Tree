Contents

1 Depth First Traversal in Graph
2 Breadth First Traversal in Graph
3 DFS in tree
4 BFS in tree
----------------------------------
# 1 Depth First Traversal 

class graph:

    def __init__(self,gdict=None):
        if gdict is None:
            gdict = {}
        self.gdict = gdict

def dfs(graph, start):
    visited = set() # 定义访问过的是集合
    stack = [start] # 定义开始的点是栈
    while stack is not None:
        vertex = stack.pop() # 把栈弹出的元素作为要走的节点 用的pop() 弹出最后一个，也就是刚加入的
        if vertex not in visited:
            visited.add(vertex) # 如果栈弹出的元素没有在走过的路上，就把visited加上弹出的元素 
            stack.extend(graph[vertex] - visited) # 栈压入 之前栈弹出元素对应的节点 减去 已经去过的节点
    return visited

gdict = { "a" : set(["b","c"]),
                "b" : set(["a", "d"]),
                "c" : set(["a", "d"]),
                "d" : set(["e"]),
                "e" : set(["a"])
                }

# 2 Breadth First Traversal in Graph

class graph:

    def __init__(self,gdict=None):
        if gdict is None:
            gdict = {}
        self.gdict = gdict

def bfs(graph, start):
    visited  = set()
    queue  = [start] # 定义一个队列
    while queue is not None:
        vertex = queue.pop(0) # 弹出来第一个元素作为顶点
        if vertex not in visited:
            visited.add(vertex) # 如果向量不在visited，那就加入这个visited
            queue.extend(graph[vertex] - visited) # 然后queue后面添加graph这个向量指向的没有去过的元素
    return visited


gdict = { "a" : set(["b","c"]),
                "b" : set(["a", "d"]),
                "c" : set(["a", "d"]),
                "d" : set(["e"]),
                "e" : set(["a"])
                }

dfs(gdict, 'a')

# DFS in tree
def minDepth1(self, root):
    if not root:
        return 0
    if None in [root.left, root.right]:
        return max(self.minDepth(root.left), self.minDepth(root.right)) + 1
    else:
        return min(self.minDepth(root.left), self.minDepth(root.right)) + 1
 
# BFS in tree  
def minDepth(self, root):
    if not root:
        return 0
    queue = collections.deque([(root, 1)])
    while queue:
        node, level = queue.popleft()
        if node:
            if not node.left and not node.right:
                return level
            else:
                queue.append((node.left, level+1))
                queue.append((node.right, level+1))
